name: Cloud Run Deploy

on:
  push:
    branches:
    - master
    - main

env:
  # Change this section according to your needs
  IMAGE_NAME:   iris-vaccine-tracker
  SERVICE:      vaccine-tracker
  DOMAIN_NAME:  vaccine-tracker.contest.community.intersystems.com

  # Leave this section untouched
  PROJECT_ID:   hackathon-297608
  CLUSTER_NAME: contest
  GITHUB_SHA:   ${{ github.sha }}
  GCR_LOCATION: eu.gcr.io
  REGION:       europe-west2
  NAMESPACE:    contest

jobs:
  deploy-cloud-run:
    name: Deploy to Cloud Run
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
 
    - name: Setup Cloud SDK
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        version: '327.0.0'
        service_account_key: ${{ secrets.SERVICE_ACCOUNT_KEY }}

    - name: Authorize Docker push
      run: gcloud auth configure-docker

    - name: Build and Push image
      run: |
        docker build -t ${GCR_LOCATION}/${PROJECT_ID}/${IMAGE_NAME}:${GITHUB_SHA} .
        docker push ${GCR_LOCATION}/${PROJECT_ID}/${IMAGE_NAME}:${GITHUB_SHA}

    - name: Deploy to Cloud Run
      run: |
        echo "Set google project..."
        gcloud config set project ${PROJECT_ID}

        echo "Deploy service..."
        gcloud run deploy ${SERVICE}   \
          --platform gke               \
          --cluster ${CLUSTER_NAME}    \
          --cluster-location ${REGION} \
          --namespace ${NAMESPACE}     \
          --port 52773                 \
          --min-instances 1            \
          --memory 512Mi               \
          --timeout 120                \
          --verbosity debug            \
          --image ${GCR_LOCATION}/${PROJECT_ID}/${IMAGE_NAME}:${GITHUB_SHA}

        echo "Create domain mappings..."
        if [[ $(gcloud run domain-mappings list --platform gke --cluster ${CLUSTER_NAME} --cluster-location ${REGION} --namespace ${NAMESPACE} --filter "DOMAIN=${DOMAIN_NAME}" | grep -v DOMAIN | wc -l) == 0 ]]; then
          gcloud run domain-mappings create \
            --service ${SERVICE}            \
            --platform gke                  \
            --cluster ${CLUSTER_NAME}       \
            --cluster-location ${REGION}    \
            --namespace ${NAMESPACE}        \
            --timeout 120                   \
            --verbosity debug               \
            --domain ${DOMAIN_NAME}
        fi

    - name: Create domain name
      run: |
        gcloud container clusters get-credentials ${CLUSTER_NAME} --region ${REGION} --project ${PROJECT_ID}
        kubectl version
        CURRENT_DOMAINS=$(kubectl -n gke-system get svc istio-ingress -o jsonpath="{.metadata.annotations['external-dns\.alpha\.kubernetes\.io/hostname']}")
        IFS=', ' read -r -a CURRENT_DOMAINS_LIST <<< "${CURRENT_DOMAINS}"
        for domain in ${CURRENT_DOMAINS_LIST[@]}; do                                      \
          echo "Checking if ${DOMAIN_NAME} exists in the existing Ingress annotation..."; \
          if [[ "${domain}" == "${DOMAIN_NAME}" ]]; then                                  \
            echo "${DOMAIN_NAME} is already set in ingress";                              \
          else                                                                            \
            echo "${DOMAIN_NAME} doesn't set in ingress";                                 \
          fi; \
        done

    - name: Enable TLS-access
      run: |
        gcloud container clusters get-credentials ${CLUSTER_NAME} --region ${REGION} --project ${PROJECT_ID}
        kubectl version
        kubectl patch configmap config-domainmapping -n knative-serving -p '{"data":{"autoTLS":"Enabled"}}'
